diff --git a/src/lxc/Makefile.am b/src/lxc/Makefile.am
index 3eeb1f4..7098b0a 100644
--- a/src/lxc/Makefile.am
+++ b/src/lxc/Makefile.am
@@ -28,6 +28,7 @@ liblxc_so_SOURCES = \
 	error.h error.c \
 	parse.c parse.h \
 	cgroup.c cgroup.h \
+	capability.c capability.h \
 	lxc.h \
 	utils.c utils.h \
 	namespace.h namespace.c \
diff --git a/src/lxc/capability.c b/src/lxc/capability.c
new file mode 100644
index 0000000..b5fa924
--- /dev/null
+++ b/src/lxc/capability.c
@@ -0,0 +1,167 @@
+/*
+ * lxc: linux Container library
+ *
+ * (C) Copyright IBM Corp. 2007, 2008
+ *
+ * Authors:
+ * Daniel Lezcano <dlezcano at fr.ibm.com>
+ * File by:
+ * Andrian Nord <nightnord@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+#undef _GNU_SOURCE
+#include <errno.h>
+#include <linux/types.h>
+#include <sys/prctl.h>
+#include <sys/capability.h>
+
+#include "capability.h"
+
+#include <lxc/log.h>
+
+#if !HAVE_DECL_PR_CAPBSET_DROP
+#define PR_CAPBSET_DROP 24
+#endif
+
+lxc_log_define(lxc_capability, lxc);
+
+struct capability {
+	char		*name;
+	__u32		code;
+	lxc_cap_state	initial_state;
+};
+
+static struct capability capabilities[] = {
+	{ "chown",		CAP_CHOWN,		LXC_CAP_KEEP	},
+
+	{ "dac_override",	CAP_DAC_OVERRIDE,	LXC_CAP_KEEP	},
+	{ "dac_read_search",	CAP_DAC_READ_SEARCH,	LXC_CAP_KEEP	},
+
+	{ "fowner",		CAP_FOWNER,		LXC_CAP_KEEP	},
+	{ "fsetid",		CAP_FSETID,		LXC_CAP_KEEP	},
+
+	{ "kill",		CAP_KILL,		LXC_CAP_KEEP	},
+
+	{ "setgid",		CAP_SETGID,		LXC_CAP_KEEP	},
+	{ "setuid",		CAP_SETUID,		LXC_CAP_KEEP	},
+
+	{ "setpcap",		CAP_SETPCAP,		LXC_CAP_KEEP	},
+	{ "linux_immutable",	CAP_LINUX_IMMUTABLE,	LXC_CAP_KEEP	},
+
+	{ "net_bind_service",	CAP_NET_BIND_SERVICE,	LXC_CAP_KEEP	},
+	{ "net_broadcast",	CAP_NET_BROADCAST,	LXC_CAP_KEEP	},
+	{ "net_admin",		CAP_NET_ADMIN,		LXC_CAP_KEEP	},
+	{ "net_raw",		CAP_NET_RAW,		LXC_CAP_KEEP	},
+
+	{ "ipc_lock",		CAP_IPC_LOCK,		LXC_CAP_KEEP	},
+	{ "ipc_owner",		CAP_IPC_OWNER,		LXC_CAP_KEEP	},
+
+	{ "sys_module",		CAP_SYS_MODULE,		LXC_CAP_DROP	},
+
+	{ "sys_rawio",		CAP_SYS_RAWIO,		LXC_CAP_DROP	},
+
+	{ "sys_chroot",		CAP_SYS_CHROOT,		LXC_CAP_KEEP	},
+
+	{ "sys_ptrace",		CAP_SYS_PTRACE,		LXC_CAP_KEEP	},
+	{ "sys_pacct",		CAP_SYS_PACCT,		LXC_CAP_DROP	},
+
+	{ "sys_admin",		CAP_SYS_ADMIN,		LXC_CAP_KEEP	},
+	{ "sys_boot",		CAP_SYS_BOOT,		LXC_CAP_DROP	},
+	{ "sys_nice",		CAP_SYS_NICE,		LXC_CAP_KEEP	},
+	{ "sys_resource",	CAP_SYS_RESOURCE,	LXC_CAP_KEEP	},
+	{ "sys_time",		CAP_SYS_TIME,		LXC_CAP_DROP	},
+
+	{ "sys_tty_config",	CAP_SYS_TTY_CONFIG,	LXC_CAP_KEEP	},
+	{ "mknod",		CAP_MKNOD,		LXC_CAP_KEEP	},
+	{ "lease",		CAP_LEASE,		LXC_CAP_KEEP	},
+
+	{ "audit_write",	CAP_AUDIT_WRITE,	LXC_CAP_DROP	},
+	{ "audit_control",	CAP_AUDIT_CONTROL,	LXC_CAP_DROP	},
+
+	{ "setfcap",		CAP_SETFCAP,		LXC_CAP_KEEP	}
+};
+
+static const size_t cap_count = sizeof(capabilities)/sizeof(struct capability);
+
+static struct capability *find_name(const char *cap_name)
+{
+	int i;
+
+	for (i = 0; i < cap_count; i++) {
+		if (!strncmp(capabilities[i].name, cap_name, strlen(cap_name)))
+			return &capabilities[i];
+	}
+
+	return NULL;
+}
+
+int lxc_capabilities_init(__u32 *mask)
+{
+	int i;
+	*mask = 0;
+
+	for (i = 0; i < cap_count; i++) {
+		if(capabilities[i].initial_state == LXC_CAP_KEEP)
+			*mask |= CAP_TO_MASK(capabilities[i].code);
+	}
+
+	return 0;
+}
+
+int lxc_capabilities_change(__u32 *mask, const char *cap_name,
+							lxc_cap_state state)
+{
+	struct capability *cap_spec;
+
+	cap_spec = find_name(cap_name);
+
+	if (!cap_spec) {
+		ERROR("capability '%s' not found", cap_name);
+		return -1;
+	}
+
+	if (state == LXC_CAP_DROP)
+		*mask &= ~CAP_TO_MASK(cap_spec->code);
+	else if (state == LXC_CAP_KEEP)
+		*mask |= CAP_TO_MASK(cap_spec->code);
+
+	return 0;
+}
+
+
+int lxc_capabilities_apply(__u32 mask)
+{
+	int i;
+	struct capability *cur_cap;
+
+	for (i = 0; i < cap_count; i++) {
+		cur_cap = &capabilities[i];
+
+		if (lxc_capabilities_check(mask, cur_cap->code))
+			continue;
+
+		DEBUG("dropping capability '%s'", cur_cap->name);
+
+	 	if (!prctl(PR_CAPBSET_DROP, cur_cap->code, 0, 0, 0))
+			continue;
+
+		SYSERROR("failed to remove '%s' capability", cur_cap->name);
+		return -1;
+	}
+
+	return 0;
+}
diff --git a/src/lxc/capability.h b/src/lxc/capability.h
new file mode 100644
index 0000000..401ad2a
--- /dev/null
+++ b/src/lxc/capability.h
@@ -0,0 +1,44 @@
+/*
+ * lxc: linux Container library
+ *
+ * (C) Copyright IBM Corp. 2007, 2008
+ *
+ * Authors:
+ * Daniel Lezcano <dlezcano at fr.ibm.com>
+ * File by:
+ * Andrian Nord <nightnord@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+#ifndef _capability_h
+#define _capability_h
+
+#include <linux/types.h>
+
+#define lxc_capabilities_check(mask, code) (mask & CAP_TO_MASK(code))
+
+typedef enum {
+	LXC_CAP_DROP	= 0,
+	LXC_CAP_KEEP	= 1
+} lxc_cap_state;
+
+int lxc_capabilities_init(__u32 *mask);
+
+int lxc_capabilities_change(__u32 *mask, const char *cap_name,
+							lxc_cap_state state);
+
+int lxc_capabilities_apply(__u32 mask);
+
+#endif
diff --git a/src/lxc/conf.c b/src/lxc/conf.c
index 9fe3a31..b4d39ff 100644
--- a/src/lxc/conf.c
+++ b/src/lxc/conf.c
@@ -43,6 +43,7 @@
 #include <net/if.h>
 #include <libgen.h>
 
+#include "capability.h"
 #include "network.h"
 #include "mount.h"
 #include "error.h"
@@ -694,11 +695,13 @@ int lxc_conf_init(const char *name, struct lxc_conf *conf)
 
 	conf->tty = 0;
 	conf->pts = 0;
+	conf->capabilities = 0;
 	conf->console[0] = '\0';
 	lxc_list_init(&conf->cgroup);
 	lxc_list_init(&conf->network);
 	lxc_list_init(&conf->fstab_files);
 	lxc_list_init(&conf->mount_list);
+	lxc_capabilities_init(&conf->capabilities);
 	return 0;
 }
 
@@ -977,6 +980,11 @@ int lxc_setup(const char *name, struct lxc_conf *lxc_conf)
 		return -1;
 	}
 
+	if (lxc_capabilities_apply(lxc_conf->capabilities)) {
+		ERROR("failed to drop capabilities");
+		return -1;
+	}
+
 	NOTICE("'%s' is setup.", name);
 
 	return 0;
diff --git a/src/lxc/conf.h b/src/lxc/conf.h
index 96ec178..7e261fc 100644
--- a/src/lxc/conf.h
+++ b/src/lxc/conf.h
@@ -25,6 +25,7 @@
 
 #include <netinet/in.h>
 #include <sys/param.h>
+#include <linux/types.h>
 
 #include <lxc/list.h>
 
@@ -135,6 +136,7 @@ struct lxc_conf {
 	char *name;
 	int tty;
 	int pts;
+	__u32 capabilities;
 	struct utsname *utsname;
 	struct lxc_list cgroup;
 	struct lxc_list network;
diff --git a/src/lxc/confile.c b/src/lxc/confile.c
index d35ee96..96ba272 100644
--- a/src/lxc/confile.c
+++ b/src/lxc/confile.c
@@ -36,6 +36,7 @@
 #include "config.h"
 #include "parse.h"
 #include "variables.h"
+#include "capability.h"
 
 #include <lxc/log.h>
 #include <lxc/conf.h>
@@ -48,6 +49,7 @@ static int config_include(const char *, char *, struct lxc_conf *);
 static int config_pts(const char *, char *, struct lxc_conf *);
 static int config_tty(const char *, char *, struct lxc_conf *);
 static int config_cgroup(const char *, char *, struct lxc_conf *);
+static int config_capability(const char *, char *, struct lxc_conf *);
 static int config_mount(const char *, char *, struct lxc_conf *);
 static int config_rootfs(const char *, char *, struct lxc_conf *);
 static int config_utsname(const char *, char *, struct lxc_conf *);
@@ -77,6 +79,7 @@ static struct config config[] = {
 	{ "lxc.pts",            config_pts            },
 	{ "lxc.tty",            config_tty            },
 	{ "lxc.cgroup",         config_cgroup         },
+	{ "lxc.capability",     config_capability     },
 	{ "lxc.mount",          config_mount          },
 	{ "lxc.rootfs",         config_rootfs         },
 	{ "lxc.utsname",        config_utsname        },
@@ -505,6 +508,38 @@ static int config_fstab(const char *key, char *value, struct lxc_conf *lxc_conf)
 	return 0;
 }
 
+static int config_capability(const char *key, char *value, struct lxc_conf *lxc_conf)
+{
+	char *prekey = "lxc.capability.";
+	char *subkey;
+
+	subkey = strstr(key, prekey);
+
+	if (!subkey)
+		return -1;
+
+	if (!strlen(subkey))
+		return -1;
+
+	if (strlen(subkey) == strlen(prekey))
+		return -1;
+
+	subkey += strlen(prekey);
+
+	lxc_cap_state state;
+
+	if (strcmp(value, "keep") == 0) {
+		state = LXC_CAP_KEEP;
+	} else if (strcmp(value, "drop") == 0) {
+		state = LXC_CAP_DROP;
+	} else {
+		ERROR("Bad value for '%s', should be 'keep' or 'drop'", key);
+		return -1;
+	}
+
+	return lxc_capabilities_change(&lxc_conf->capabilities, subkey, state);
+}
+
 static int config_mount(const char *key, char *value, struct lxc_conf *lxc_conf)
 {
 	char *fstab_token = "lxc.mount";
diff --git a/src/lxc/start.c b/src/lxc/start.c
index cbd4c3c..457422e 100644
--- a/src/lxc/start.c
+++ b/src/lxc/start.c
@@ -39,7 +39,6 @@
 #include <sys/types.h>
 #include <sys/prctl.h>
 #include <sys/types.h>
-#include <sys/capability.h>
 #include <sys/wait.h>
 #include <sys/un.h>
 #include <sys/poll.h>
@@ -84,10 +83,6 @@ int signalfd(int fd, const sigset_t *mask, int flags)
 }
 #endif
 
-#if !HAVE_DECL_PR_CAPBSET_DROP
-#define PR_CAPBSET_DROP 24
-#endif
-
 #include <lxc/log.h>
 #include <lxc/conf.h>
 #include <lxc/confile.h>
@@ -371,11 +366,6 @@ static int do_start(void *arg)
 		goto out_warn_father;
 	}
 
-	if (prctl(PR_CAPBSET_DROP, CAP_SYS_BOOT, 0, 0, 0)) {
-		SYSERROR("failed to remove CAP_SYS_BOOT capability");
-		goto out_child;
-	}
-
 	if (prctl(PR_SET_PDEATHSIG, SIGKILL, 0, 0, 0)) {
 		SYSERROR("failed to set pdeath signal");
 		goto out_child;
