diff --git a/src/lxc/conf.c b/src/lxc/conf.c
index b4e3a3e..9d4285d 100644
--- a/src/lxc/conf.c
+++ b/src/lxc/conf.c
@@ -813,11 +813,18 @@ out:
 	return ret;
 }
 
-int lxc_conf_init(struct lxc_conf *conf)
+int lxc_conf_init(const char *name, struct lxc_conf *conf)
 {
 	conf->rootfs = NULL;
 	conf->fstab = NULL;
 	conf->utsname = NULL;
+
+	conf->name = strdup(name);
+	if (!conf->name) {
+		SYSERROR( "failed to allocate memory" );
+		return -1;
+	}
+
 	conf->tty = 0;
 	conf->pts = 0;
 	conf->console[0] = '\0';
diff --git a/src/lxc/conf.h b/src/lxc/conf.h
index 215f1e5..cf1b1f0 100644
--- a/src/lxc/conf.h
+++ b/src/lxc/conf.h
@@ -133,6 +133,7 @@ struct lxc_tty_info {
 struct lxc_conf {
 	char *rootfs;
 	char *fstab;
+	char *name;
 	int tty;
 	int pts;
 	struct utsname *utsname;
@@ -146,7 +147,7 @@ struct lxc_conf {
 /*
  * Initialize the lxc configuration structure
  */
-extern int lxc_conf_init(struct lxc_conf *conf);
+extern int lxc_conf_init(const char *name, struct lxc_conf *conf);
 
 extern int lxc_create_network(struct lxc_list *networks);
 extern int lxc_assign_network(struct lxc_list *networks, pid_t pid);
diff --git a/src/lxc/confile.c b/src/lxc/confile.c
index 43bede4..7a2b300 100644
--- a/src/lxc/confile.c
+++ b/src/lxc/confile.c
@@ -20,6 +20,7 @@
  * License along with this library; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
  */
+#define _GNU_SOURCE
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
@@ -32,6 +33,7 @@
 #include <netinet/in.h>
 #include <net/if.h>
 
+#include "config.h"
 #include "parse.h"
 
 #include <lxc/log.h>
@@ -39,6 +41,9 @@
 
 lxc_log_define(lxc_confile, lxc);
 
+int lxc_config_read(const char *file, struct lxc_conf *conf);
+
+static int config_include(const char *, char *, struct lxc_conf *);
 static int config_pts(const char *, char *, struct lxc_conf *);
 static int config_tty(const char *, char *, struct lxc_conf *);
 static int config_cgroup(const char *, char *, struct lxc_conf *);
@@ -56,13 +61,18 @@ static int config_network_ipv6(const char *, char *, struct lxc_conf *);
 
 typedef int (*config_cb)(const char *, char *, struct lxc_conf *);
 
+struct parsing_state {
+	const char *file;
+	struct lxc_conf *lxc_conf;
+};
+
 struct config {
 	char *name;
 	config_cb cb;
 };
 
 static struct config config[] = {
-
+	{ "config.include",     config_include        },
 	{ "lxc.pts",            config_pts            },
 	{ "lxc.tty",            config_tty            },
 	{ "lxc.cgroup",         config_cgroup         },
@@ -92,6 +102,30 @@ static struct config *getconfig(const char *key)
 	return NULL;
 }
 
+static int config_include(const char *key, char *value, struct lxc_conf *lxc_conf)
+{
+	char *path;
+	int ret;
+
+	DEBUG("including config %s", value);
+
+	if (value[0] == '/')
+		return lxc_config_read(value, lxc_conf);
+
+	if(!asprintf(&path, LXCPATH "/%s/%s", lxc_conf->name, value)) {
+		SYSERROR("failed to allocate memory");
+		return -1;
+	}
+
+	DEBUG("guessed absolute include path as %s", path);
+
+	ret = lxc_config_read(path, lxc_conf);
+
+	free(path);
+
+	return ret;
+}
+
 static int config_network_type(const char *key, char *value, struct lxc_conf *lxc_conf)
 {
 	struct lxc_list *network = &lxc_conf->network;
@@ -532,6 +566,7 @@ static int config_utsname(const char *key, char *value, struct lxc_conf *lxc_con
 static int parse_line(void *buffer, void *data)
 {
 	struct config *config;
+	struct parsing_state *state = data;
 	char *line = buffer;
 	char *dot;
 	char *key;
@@ -546,7 +581,7 @@ static int parse_line(void *buffer, void *data)
 
 	dot = strstr(line, "=");
 	if (!dot) {
-		ERROR("invalid configuration line: %s", line);
+		ERROR("%s: syntax error in line: %s", state->file, line);
 		return -1;
 	}
 
@@ -561,17 +596,21 @@ static int parse_line(void *buffer, void *data)
 
 	config = getconfig(key);
 	if (!config) {
-		ERROR("unknow key %s", key);
+		ERROR("%s: unknow key %s", state->file, key);
 		return -1;
 	}
 
-	return config->cb(key, value, data);
+	return config->cb(key, value, state->lxc_conf);
 }
 
 int lxc_config_read(const char *file, struct lxc_conf *conf)
 {
 	char buffer[MAXPATHLEN];
+	struct parsing_state state = {
+		.file = file,
+		.lxc_conf = conf
+	};
 
 	return lxc_file_for_each_line(file, parse_line, buffer,
-				      sizeof(buffer), conf);
+				      sizeof(buffer), &state);
 }
diff --git a/src/lxc/start.c b/src/lxc/start.c
index e59b4e3..cbd4c3c 100644
--- a/src/lxc/start.c
+++ b/src/lxc/start.c
@@ -246,7 +246,7 @@ struct lxc_handler *lxc_init(const char *name, const char *rcfile)
 		goto out_free;
 	}
 
-	if (lxc_conf_init(&handler->conf)) {
+	if (lxc_conf_init(name, &handler->conf)) {
 		ERROR("failed to initialize the configuration");
 		goto out_aborting;
 	}
