#!/sbin/runscript
# Copyright 1999-2009 Gentoo Foundation
# Distributed under the terms of the GNU General Public License v2
# $Header: $

description="Operate LinuX Containers on boot and shutdown"

opts="${opts} restart"

if [[ "${RC_SVCNAME/.}" != "${RC_SVCNAME}" ]]; then
	LXC_SINGLE=true

	LXC_CONTAINER="${RC_SVCNAME#*.}"
else
	LXC_SINGLE=false

	opts="${opts} autostart"
fi

depend() {
	after net
	${LXC_SINGLE} && before lxc

	provide ${RC_SVCNAME}
}

## Utils

make_vars() {
	${LXC_SINGLE} && source /etc/conf.d/lxc

	: ${LXC_ROOT:=/etc/lxc}
	: ${LXC_CONFIG_PATH:=${LXC_ROOT}/'${name}'/config}
	: ${LXC_AUTOBOOT:=autoboot}

	: ${LXC_START:=/usr/sbin/lxc-start}
	: ${LXC_STOP:=/usr/sbin/lxc-stop}

	: ${LXC_HOOK_TYPE:=sysvinit}

	: ${LXC_INFO:=/usr/sbin/lxc-info}

	: ${LXC_WAIT_TIMEOUT:=30}

        [ -n "${LXC_PARALLEL}" ] && return

	# Taken from OpenVZ init.d

        LXC_PARALLEL=`awk '
	BEGIN { num=0; }
	$1 == "processor" { num++; }
	END { print num * 4; }' /proc/cpuinfo`
}

lxc_select_random() {
	echo "$@" | awk "{ print \$$(( $RANDOM % $# + 1 )); }"
}

lxc_threads=0
lxc_names=

lxc_fails=0

lxc_wait_for_pid() {
	local waitpid=$1

	echo "${waitpid}" | start-stop-daemon --stop \
		--pidfile /proc/self/fd/0 \
		--retry SIGCHLD/${LXC_WAIT_TIMEOUT} &> /dev/null

	return $?
}

lxc_wait_slot() {
	local container=$(lxc_select_random ${lxc_names})

	eval local waitpid=\${lxc_pid_$(shell_var "${container}")}

	if [[ -n "${waitpid}" ]]; then
		lxc_wait_for_pid ${waitpid}

		if [[ $? -ne 0 ]]; then
			lxc_fails=$(( $lxc_fails + 1 ))
		fi
	fi

	lxc_threads=$(( $lxc_threads - 1 ));
	lxc_names=$( echo "${lxc_names}" | sed -e "s/${container}//" \
			-r -e 's/(^ | $)//g; s/ +/ /g')
	eval unset lxc_pid_$(shell_var "${container}")

	return 0
}

lxc_threaded() {
	local name=$1; shift;

	local run="$@"

	while [[ ${lxc_threads} -eq ${LXC_PARALLEL} ]]; do
		lxc_wait_slot
	done

	lxc_threads=$(( $lxc_threads + 1 ));
	lxc_names="${lxc_names} ${name}"

	${run} &

	eval lxc_pid_$(shell_var "${container}")=$!
}

lxc_run() {
	local name=$1; shift;
	local prerun_msg=$1 fail_msg=$2; shift; shift;

	local run="$@"

	einfo "LXC ${name}: ${prerun_msg}"

	local err=$( ${run} 2>&1 )

	[[ -z "${err}" ]] && return 0

	eerror "LXC ${name}: ${fail_msg}:"

	local line=
	echo -e "${err}" | while read -r line; do
		eerror "LXC ${name}: ${line}"
	done

	return 1
}

lxc_hook() {
	local hook_id=$1;
	shift;

	local base_hook="${hook_id}_hook"

	if type ${base_hook} &>/dev/null; then
		${base_hook} "$@"
	else
		local default_hook="${base_hook}_${LXC_HOOK_TYPE}"

		if ! type ${default_hook} &> /dev/null; then
			eerror "conf.d error: no ${default_hook} hook defined"

			return 1
		fi
		
		${default_hook} "${container}"
	fi
}

# Helper functions

want_autostart() {
	local name=$1

	local flag="${LXC_ROOT}/${name}/${LXC_AUTOBOOT}"

	[[ -f "${flag}" ]] && return 0

	return 1
}

lxc_list() {
	local state=$1
	
	if [[ -z "${state}" ]]; then
		find "${LXC_ROOT}" -maxdepth 1 -type d \
			-not -path "${LXC_ROOT}" -printf "%f\n"
	else
		local container=

		for container in $(lxc_list); do
			${LXC_INFO} --name "${container}"	|  \
				grep -q "${state}$"		&& \
					echo "${container}"
		done
	fi
}

lxc_get_pid() {
	local name=$1 cmd=$2

	lxc-ps --name ${name} | grep "${cmd}" | \
		awk '{ print $2; }' | sed 's/ //g'
}

lxc_sync_start() {
	local container=$1 line=

	local logfile=$(mktemp /tmp/lxc."${container}".XXXX)
	eval local config="${LXC_CONFIG_PATH}"

	${LXC_START} --name "${container}" \
		-l NOTICE -o '/proc/self/fd/1' -d \
		-f ${config} | \
		while read -r line; do
			echo "${line}" >> "${logfile}"

			if echo "${line}" | grep -q ERROR; then
				break;
			fi

			if echo "${line}" | grep -q started; then
				rm -f "${logfile}"

				return 0
			fi
		done;

	[[ -e "${logfile}" ]] || return 0;

	cat "${logfile}"

	rm -f "${logfile}"

	return 1
}

# Single mode operation wrapper

single_cmd() {
	local action=$1 ready_state=$2 cmd=$3

	if [[ -n "${ready_state}" ]] && ${LXC_INFO} -n "${LXC_CONTAINER}" | \
						grep -qE "${ready_state}"; then
		ewarn "LXC ${LXC_CONTAINER} already affected"
		return 0
	fi

	ebegin "${action} LXC ${LXC_CONTAINER}"

	eindent

	if ! [[ -e "${LXC_ROOT}/${LXC_CONTAINER}" ]]; then
		eoutdent

		eend 1 "Container ${LXC_CONTAINER} not exists"
	fi

	${cmd} "${LXC_CONTAINER}"

	eoutdent

	eend $?
}


# OpenRC callbacks with corresponding threaded functions

lxc_start() {
	local container=$1

	lxc_run "${container}" "launching" "start failed" \
		lxc_sync_start "${container}" || return 1
	
	local ret=$?

	# We can't use lxc-wait as it is locking it's socket, no threads

	lxc_hook lxc_start "${container}" || return 1

	rm -f "${logfile}"

	return ${ret}
}

start() {
        if [[ "${RC_CMD}" == "restart" ]]; then
		return 0
	fi  

	make_vars

	${LXC_SINGLE} && single_cmd "Starting" \
		"(RUNNING|STARTING|FREEZING|FROZEN)" lxc_start || autostart

	return $?
}

autostart(){
	[[ ${RC_CMD} == "autostart" ]] && make_vars
	
	ebegin "Autostarting LXCs with '${LXC_AUTOBOOT}' flag"

	eindent
	
	local container= names=
	for container in $(lxc_list); do
		want_autostart "${container}" || continue;
		${LXC_INFO} -n "${container}" | grep -q 'RUN' && continue;

		lxc_threaded "${container}" lxc_start "${container}"

		names="${names} ${container}"
	done

	while [[ -n "${lxc_names}" ]]; do
		lxc_wait_slot
	done

	lxc_fails=0
	local failed=
	for container in ${names}; do
		${LXC_INFO} -n "${container}" | grep -q 'RUN' && continue;

		lxc_fails=$(( $lxc_fails + 1 ));
		failed="${failed} ${container}"
	done

	eoutdent

	eend ${lxc_fails} "Failed to run LXCs: ${failed}";
}

lxc_stop() {
	local container=$1

	einfo "LXC ${container}: sending shutdown command to container's init"

	lxc_hook lxc_stop "${container}" || return 1

	lxc_run "${container}" "really stopping" "stop failed" \
		${LXC_STOP} --name "${container}"

	return $?
}

stop() {
	if [[ "${RC_CMD}" == "restart" ]]; then
		restart

		return $?
	fi

	make_vars

	${LXC_SINGLE} && single_cmd "Stopping" "(STOP.*|ABORTING)"\
				lxc_stop || auto_stop

	return $?
}

auto_stop() {
	ebegin "Stopping all started LXCs"

	eindent

	for container in $(lxc_list RUNNING); do
		lxc_threaded "${container}" lxc_stop "${container}"
	done

	while [[ -n "${lxc_names}" ]]; do
		lxc_wait_slot
	done

	eoutdent

	eend ${lxc_fails}
}

lxc_restart() {
	local name=$1

	lxc_stop "${name}" && lxc_start "${name}"

	return $?
}

restart() {
	make_vars

	${LXC_SINGLE} && single_cmd "Restarting" "" lxc_restart || auto_restart

	return $?
}

auto_restart() {
	ebegin "Restarting all started LXCs"

	eindent

	for container in $(lxc_list RUNNING); do
		lxc_threaded "${container}" lxc_restart "${container}"
	done

	while [[ -n "${lxc_names}" ]]; do
		lxc_wait_slot
	done

	eoutdent

	eend ${lxc_fails}
}

# Hooks helpers
## sysvinit:
lxc_append_inittab() {
	local inittab=$1 magic_string=$2

	if ! grep -q "${magic_string}" "${inittab}"; then
		sed -r "s/^([[:space:]]*${magic_string%%:*})/#\1/" -i "${inittab}"

		echo "${magic_string}" >> "${inittab}"
	fi
}

# Hook helpers

lxc_get_single_init(){
	local name=$1

	while true; do
		set -- x $(lxc_get_pid "${name}" "init$"); shift

		if [[ $# -eq 1 ]]; then
			echo $1

			return 0;
		elif [[ $# -eq 0 || $# -gt 2 ]]; then
			eerror "LXC ${name}: bad init's count"

			return 1;
		fi

		local pid=$(echo $(ps --pid $1 -o ppid h))
		local parent= child=

		if [[ "${pid}" == "$2" ]]; then
			parent=$2
			child=$1
		else
			parent=$1
			child=$2
		fi

		lxc_wait_for_pid ${child}

		if [[ $? -ne 0 ]]; then
			eerror "LXC ${name}: boot phase timed out"

			return 1
		fi
	done
}

# Hooks
## lxc_start
#### sysvinit:
lxc_start_hook_sysvinit() {
	local name=$1

	local initpid=$(lxc_get_single_init "${name}")

	if [[ -z "${initpid}" ]]; then
		eerror "LXC ${name}: sysvinit hook failed: no init started"
		return 1
	fi

	local rootfs="/proc/${initpid}/root/"
	local inittab="${rootfs}/etc/inittab"

	local dummy_start="${rootfs}/.dummy.start"
	local dummy_end="${rootfs}/.dummy.end"

	if ! [[ -x ${dummy_start} && -x ${dummy_end} ]]; then
		cat <<'DUMMY' > ${dummy_start}
#!/bin/sh

# GENERATED AUTOMATICALLY, DO NOT REMOVE
# ANYWAY, IT WILL BE REGENERATED ON NEXT START

while true; do sleep 15m; done
DUMMY
		cat <<'DUMMY' > ${dummy_end}
#!/bin/sh

# GENERATED AUTOMATICALLY, DO NOT REMOVE
# ANYWAY, IT WILL BE REGENERATED ON NEXT START

kill -9 $(pgrep '^\.dummy\.start$')
while true; do sleep 15m; done
DUMMY

		chmod +x ${dummy_start} ${dummy_end}
	fi

	lxc_append_inittab "${inittab}" "stub::boot:/.dummy.start"
	lxc_append_inittab "${inittab}" "ends:12345:once:/.dummy.end"

	kill -HUP "${initpid}"

	lxc_get_single_init "${name}" > /dev/null
	lxc_get_single_init "${name}" > /dev/null

	local start_pid=$(lxc_get_pid "${name}" '\.dummy\.start$')

	[[ -z "${start_pid}" ]] || lxc_wait_for_pid "${start_pid}"

	local end_pid=$(lxc_get_pid "${name}" '\.dummy\.end$')

	if [[ -z "${end_pid}" ]]; then
		eerror "LXC ${name}: sysvinit hook failed: no dummy processes"
		return 1
	fi

	kill -9 "${end_pid}"

	return 0
}

## lxc_stop
#### sysvinit:
lxc_stop_hook_sysvinit() {
	local name=$1

	initpid=$(lxc_get_pid "${name}" "init$")

	[[ -z "${initpid}" ]] && return 1

	local inittab="/proc/${initpid}/root/etc/inittab"

	lxc_append_inittab "${inittab}" "ca:12345:ctrlaltdel:/sbin/shutdown -hP now"

	# Ensure that SIGINT will shutdown container
	kill -HUP ${initpid}
	kill -INT ${initpid}

	# This will wait untill all childs will die, but, generally, this
	# doesn't mean that rc finishes it's work. But, at least, all
	# significant data will not be lost.

	# Also, in case of openrc, any opened shell or agetty will die at
	# very final states, so if we have agetty into inittab it will ensure
	# that all work is done (kill all processes - it's last what openrc may
	# do inside container)
	while true; do
		local childs=$(ps --ppid ${initpid} -o pid h)

		[[ -z "${childs}" ]] && break;

		local waitpid=$(lxc_select_random ${childs})

		# One big dirty hack to prevent deadlock if container stucked

		lxc_wait_for_pid ${waitpid}

		[[ $? -eq 0 ]] && return 0
		
		eerror "LXC ${name}: init timed out: forcing shutdown"

		return 1
	done
}

