diff --git a/src/lxc/Makefile.am b/src/lxc/Makefile.am
index 6840e15..3eeb1f4 100644
--- a/src/lxc/Makefile.am
+++ b/src/lxc/Makefile.am
@@ -31,7 +31,9 @@ liblxc_so_SOURCES = \
 	lxc.h \
 	utils.c utils.h \
 	namespace.h namespace.c \
+	mount.c mount.h \
 	conf.c conf.h \
+	variables.c variables.h \
 	confile.c confile.h \
 	list.h \
 	state.c state.h \
diff --git a/src/lxc/conf.c b/src/lxc/conf.c
index 9d4285d..9fe3a31 100644
--- a/src/lxc/conf.c
+++ b/src/lxc/conf.c
@@ -27,17 +27,15 @@
 #include <errno.h>
 #include <string.h>
 #include <dirent.h>
-#include <mntent.h>
 #include <unistd.h>
 #include <pty.h>
 
 #include <sys/types.h>
 #include <sys/utsname.h>
 #include <sys/param.h>
-#include <sys/stat.h>
 #include <sys/socket.h>
-#include <sys/mount.h>
 #include <sys/mman.h>
+#include <sys/mount.h>
 
 #include <arpa/inet.h>
 #include <fcntl.h>
@@ -46,6 +44,7 @@
 #include <libgen.h>
 
 #include "network.h"
+#include "mount.h"
 #include "error.h"
 #include "parse.h"
 #include "config.h"
@@ -67,12 +66,6 @@ lxc_log_define(lxc_conf, lxc);
 
 typedef int (*instanciate_cb)(struct lxc_netdev *);
 
-struct mount_opt {
-	char *name;
-	int clear;
-	int flag;
-};
-
 static int instanciate_veth(struct lxc_netdev *);
 static int instanciate_macvlan(struct lxc_netdev *);
 static int instanciate_phys(struct lxc_netdev *);
@@ -85,30 +78,6 @@ static  instanciate_cb netdev_conf[MAXCONFTYPE + 1] = {
 	[EMPTY]   = instanciate_empty,
 };
 
-static struct mount_opt mount_opt[] = {
-	{ "defaults",   0, 0              },
-	{ "ro",         0, MS_RDONLY      },
-	{ "rw",         1, MS_RDONLY      },
-	{ "suid",       1, MS_NOSUID      },
-	{ "nosuid",     0, MS_NOSUID      },
-	{ "dev",        1, MS_NODEV       },
-	{ "nodev",      0, MS_NODEV       },
-	{ "exec",       1, MS_NOEXEC      },
-	{ "noexec",     0, MS_NOEXEC      },
-	{ "sync",       0, MS_SYNCHRONOUS },
-	{ "async",      1, MS_SYNCHRONOUS },
-	{ "remount",    0, MS_REMOUNT     },
-	{ "mand",       0, MS_MANDLOCK    },
-	{ "nomand",     1, MS_MANDLOCK    },
-	{ "atime",      1, MS_NOATIME     },
-	{ "noatime",    0, MS_NOATIME     },
-	{ "diratime",   1, MS_NODIRATIME  },
-	{ "nodiratime", 0, MS_NODIRATIME  },
-	{ "bind",       0, MS_BIND        },
-	{ "rbind",      0, MS_BIND|MS_REC },
-	{ NULL,         0, 0              },
-};
-
 static int configure_find_fstype_cb(void* buffer, void *data)
 {
 	struct cbarg {
@@ -479,144 +448,43 @@ out:
 	return ret;
 }
 
-static void parse_mntopt(char *opt, unsigned long *flags, char **data)
+static int setup_mount(struct lxc_conf *lxc_conf)
 {
-	struct mount_opt *mo;
-
-	/* If opt is found in mount_opt, set or clear flags.
-	 * Otherwise append it to data. */
-
-	for (mo = &mount_opt[0]; mo->name != NULL; mo++) {
-		if (!strncmp(opt, mo->name, strlen(mo->name))) {
-			if (mo->clear)
-				*flags &= ~mo->flag;
-			else
-				*flags |= mo->flag;
-			return;
-		}
-	}
-
-	if (strlen(*data))
-		strcat(*data, ",");
-	strcat(*data, opt);
-}
-
-static int parse_mntopts(struct mntent *mntent, unsigned long *mntflags,
-			 char **mntdata)
-{
-	char *s, *data;
-	char *p, *saveptr = NULL;
-
-	if (!mntent->mnt_opts)
-		return 0;
-
-	s = strdup(mntent->mnt_opts);
-	if (!s) {
-		SYSERROR("failed to allocate memory");
-		return -1;
-	}
-
-	data = malloc(strlen(s) + 1);
-	if (!data) {
-		SYSERROR("failed to allocate memory");
-		free(s);
-		return -1;
-	}
-	*data = 0;
-
-	for (p = strtok_r(s, ",", &saveptr); p != NULL;
-	     p = strtok_r(NULL, ",", &saveptr))
-		parse_mntopt(p, mntflags, &data);
-
-	if (*data)
-		*mntdata = data;
-	else
-		free(data);
-	free(s);
-
-	return 0;
-}
-
-static int mount_file_entries(FILE *file)
-{
-	struct mntent *mntent;
-	int ret = -1;
-	unsigned long mntflags;
-	char *mntdata;
-
-	while ((mntent = getmntent(file))) {
+	struct lxc_list *iterator;
+	char *fstab;
+	int ret;
 
-		mntflags = 0;
-		mntdata = NULL;
-		if (parse_mntopts(mntent, &mntflags, &mntdata) < 0) {
-			ERROR("failed to parse mount option '%s'",
-				      mntent->mnt_opts);
-			goto out;
-		}
+	lxc_list_for_each(iterator, &lxc_conf->fstab_files) {
+		fstab = iterator->elem;
 
-		if (mount(mntent->mnt_fsname, mntent->mnt_dir,
-			  mntent->mnt_type, mntflags, mntdata)) {
-			SYSERROR("failed to mount '%s' on '%s'",
-					 mntent->mnt_fsname, mntent->mnt_dir);
+		if ((ret = lxc_mount_fstab(fstab, lxc_conf))) {
+			ERROR("mounting fstab '%s' failed", fstab);
 			goto out;
 		}
-
-		DEBUG("mounted %s on %s, type %s", mntent->mnt_fsname,
-		      mntent->mnt_dir, mntent->mnt_type);
-
-		free(mntdata);
 	}
 
-	ret = 0;
-
-	INFO("mount points have been setup");
+	INFO("fstab files have been setup");
 out:
 	return ret;
 }
 
-static int setup_mount(const char *fstab)
+static int setup_mount_entries(struct lxc_list *mounts)
 {
-	FILE *file;
-	int ret;
-
-	if (!fstab)
-		return 0;
-
-	file = setmntent(fstab, "r");
-	if (!file) {
-		SYSERROR("failed to use '%s'", fstab);
-		return -1;
-	}
-
-	ret = mount_file_entries(file);
-
-	endmntent(file);
-	return ret;
-}
-
-static int setup_mount_entries(struct lxc_list *mount)
-{
-	FILE *file;
 	struct lxc_list *iterator;
 	char *mount_entry;
 	int ret;
 
-	file = tmpfile();
-	if (!file) {
-		ERROR("tmpfile error: %m");
-		return -1;
-	}
-
-	lxc_list_for_each(iterator, mount) {
+	lxc_list_for_each(iterator, mounts) {
 		mount_entry = iterator->elem;
-		fprintf(file, "%s", mount_entry);
-	}
 
-	rewind(file);
-
-	ret = mount_file_entries(file);
+		if ((ret = lxc_mount_line(mount_entry))) {
+			ERROR("mounting lxc.mount.entry failed");
+			goto out;
+		}
+	}
 
-	fclose(file);
+	INFO("fstab files have been setup");
+out:
 	return ret;
 }
 
@@ -816,7 +684,6 @@ out:
 int lxc_conf_init(const char *name, struct lxc_conf *conf)
 {
 	conf->rootfs = NULL;
-	conf->fstab = NULL;
 	conf->utsname = NULL;
 
 	conf->name = strdup(name);
@@ -830,6 +697,7 @@ int lxc_conf_init(const char *name, struct lxc_conf *conf)
 	conf->console[0] = '\0';
 	lxc_list_init(&conf->cgroup);
 	lxc_list_init(&conf->network);
+	lxc_list_init(&conf->fstab_files);
 	lxc_list_init(&conf->mount_list);
 	return 0;
 }
@@ -1079,7 +947,7 @@ int lxc_setup(const char *name, struct lxc_conf *lxc_conf)
 		return -1;
 	}
 
-	if (setup_mount(lxc_conf->fstab)) {
+	if (setup_mount(lxc_conf)) {
 		ERROR("failed to setup the mounts for '%s'", name);
 		return -1;
 	}
diff --git a/src/lxc/conf.h b/src/lxc/conf.h
index cf1b1f0..96ec178 100644
--- a/src/lxc/conf.h
+++ b/src/lxc/conf.h
@@ -132,13 +132,13 @@ struct lxc_tty_info {
  */
 struct lxc_conf {
 	char *rootfs;
-	char *fstab;
 	char *name;
 	int tty;
 	int pts;
 	struct utsname *utsname;
 	struct lxc_list cgroup;
 	struct lxc_list network;
+	struct lxc_list fstab_files;
 	struct lxc_list mount_list;
 	struct lxc_tty_info tty_info;
 	char console[MAXPATHLEN];
diff --git a/src/lxc/confile.c b/src/lxc/confile.c
index 7a2b300..d35ee96 100644
--- a/src/lxc/confile.c
+++ b/src/lxc/confile.c
@@ -35,6 +35,7 @@
 
 #include "config.h"
 #include "parse.h"
+#include "variables.h"
 
 #include <lxc/log.h>
 #include <lxc/conf.h>
@@ -477,17 +478,30 @@ static int config_cgroup(const char *key, char *value, struct lxc_conf *lxc_conf
 
 static int config_fstab(const char *key, char *value, struct lxc_conf *lxc_conf)
 {
+	struct lxc_list *fstabs = &lxc_conf->fstab_files;
+	struct lxc_list *list;
+
 	if (strlen(value) >= MAXPATHLEN) {
 		ERROR("%s path is too long", value);
 		return -1;
 	}
 
-	lxc_conf->fstab = strdup(value);
-	if (!lxc_conf->fstab) {
-		SYSERROR("failed to duplicate string %s", value);
+	list = malloc(sizeof(*list));
+	if (!list) {
+		SYSERROR("failed to allocate memory");
 		return -1;
 	}
 
+	lxc_list_init(list);
+	list->elem = strdup(value);
+
+	if (!list->elem) {
+		SYSERROR("failed to duplicate string %s: no memory", value);
+		return -1;
+	}
+
+	lxc_list_add_tail(fstabs, list);
+
 	return 0;
 }
 
@@ -570,7 +584,9 @@ static int parse_line(void *buffer, void *data)
 	char *line = buffer;
 	char *dot;
 	char *key;
-	char *value;
+	char *value, *expanded;
+		
+	int ret;
 
 	if (lxc_is_line_empty(line))
 		return 0;
@@ -600,7 +616,16 @@ static int parse_line(void *buffer, void *data)
 		return -1;
 	}
 
-	return config->cb(key, value, state->lxc_conf);
+	if (lxc_resolve_variables(value, &expanded, state->lxc_conf)) {
+		ERROR("%s: variable resolution failed", state->file);
+		return -1;
+	}
+
+	ret = config->cb(key, expanded, state->lxc_conf);
+
+	free(expanded);
+
+	return ret;
 }
 
 int lxc_config_read(const char *file, struct lxc_conf *conf)
diff --git a/src/lxc/mount.c b/src/lxc/mount.c
new file mode 100644
index 0000000..6c6ed22
--- /dev/null
+++ b/src/lxc/mount.c
@@ -0,0 +1,314 @@
+/*
+ * lxc: linux Container library
+ *
+ * (C) Copyright IBM Corp. 2007, 2008
+ *
+ * Authors:
+ * Daniel Lezcano <dlezcano at fr.ibm.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+#include <stdio.h>
+#include <stdlib.h>
+#include <mntent.h>
+#include <string.h>
+#include <errno.h>
+
+#include <sys/mount.h>
+#include <sys/param.h>
+
+#include "parse.h"
+#include "variables.h"
+
+#include <lxc/log.h>
+
+lxc_log_define(lxc_mount, lxc);
+
+#ifndef MS_REC
+#define MS_REC 16384
+#endif
+
+struct parsing_state {
+	const char *file;
+	int line;
+	struct lxc_conf *lxc_conf;
+};
+
+struct mount_opt {
+	char *name;
+	int clear;
+	int flag;
+};
+
+static struct mount_opt mount_opt[] = {
+	{ "defaults",   0, 0              },
+	{ "ro",         0, MS_RDONLY      },
+	{ "rw",         1, MS_RDONLY      },
+	{ "suid",       1, MS_NOSUID      },
+	{ "nosuid",     0, MS_NOSUID      },
+	{ "dev",        1, MS_NODEV       },
+	{ "nodev",      0, MS_NODEV       },
+	{ "exec",       1, MS_NOEXEC      },
+	{ "noexec",     0, MS_NOEXEC      },
+	{ "sync",       0, MS_SYNCHRONOUS },
+	{ "async",      1, MS_SYNCHRONOUS },
+	{ "remount",    0, MS_REMOUNT     },
+	{ "mand",       0, MS_MANDLOCK    },
+	{ "nomand",     1, MS_MANDLOCK    },
+	{ "atime",      1, MS_NOATIME     },
+	{ "noatime",    0, MS_NOATIME     },
+	{ "diratime",   1, MS_NODIRATIME  },
+	{ "nodiratime", 0, MS_NODIRATIME  },
+	{ "bind",       0, MS_BIND        },
+	{ "rbind",      0, MS_BIND|MS_REC },
+	{ NULL,         0, 0              },
+};
+
+static void parse_mntopt(char *opt, unsigned long *flags, char **data)
+{
+	struct mount_opt *mo;
+
+	/* If opt is found in mount_opt, set or clear flags.
+	 * Otherwise append it to data. */
+
+	for (mo = &mount_opt[0]; mo->name != NULL; mo++) {
+		if (!strncmp(opt, mo->name, strlen(mo->name))) {
+			if (mo->clear)
+				*flags &= ~mo->flag;
+			else
+				*flags |= mo->flag;
+			return;
+		}
+	}
+
+	if (strlen(*data))
+		strcat(*data, ",");
+	strcat(*data, opt);
+}
+
+static int parse_mntopts(struct mntent *mntent, unsigned long *mntflags,
+			 char **mntdata)
+{
+	char *s, *data;
+	char *p, *saveptr = NULL;
+
+	if (!mntent->mnt_opts)
+		return 0;
+
+	s = strdup(mntent->mnt_opts);
+	if (!s) {
+		SYSERROR("failed to allocate memory");
+		return -1;
+	}
+
+	data = malloc(strlen(s) + 1);
+	if (!data) {
+		SYSERROR("failed to allocate memory");
+		free(s);
+		return -1;
+	}
+	*data = 0;
+
+	for (p = strtok_r(s, ",", &saveptr); p != NULL;
+	     p = strtok_r(NULL, ",", &saveptr))
+		parse_mntopt(p, mntflags, &data);
+
+	if (*data)
+		*mntdata = data;
+	else
+		free(data);
+	free(s);
+
+	return 0;
+}
+
+static int mount_entry(struct mntent *mntent)
+{
+	unsigned long mntflags;
+	char *mntdata;
+
+	int ret = -1;
+
+	mntflags = 0;
+	mntdata = NULL;
+
+	if (parse_mntopts(mntent, &mntflags, &mntdata) < 0) {
+		ERROR("failed to parse mount option '%s'", mntent->mnt_opts);
+		goto out;
+	}
+
+	if (mount(mntent->mnt_fsname, mntent->mnt_dir,
+				  mntent->mnt_type, mntflags, mntdata)) {
+		SYSERROR("failed to mount '%s' on '%s'",
+					mntent->mnt_fsname, mntent->mnt_dir);
+		goto free;
+	}
+
+	DEBUG("mounted %s on %s, type %s", mntent->mnt_fsname,
+					mntent->mnt_dir, mntent->mnt_type);
+
+	ret = 0;
+free:
+	free(mntdata);
+out:
+	return ret;
+}
+
+static void mntent_free(struct mntent* mntent)
+{
+	if (mntent->mnt_opts)
+		free(mntent->mnt_opts);
+
+	if (mntent->mnt_type)
+		free(mntent->mnt_type);
+
+	if (mntent->mnt_dir)
+		free(mntent->mnt_dir);
+
+	if (mntent->mnt_fsname)
+		free(mntent->mnt_fsname);
+
+	free(mntent);
+}
+
+static int parse_mount_line(char *line, struct mntent **mntent)
+{
+	struct mntent *entry;
+
+	int ret = -1;
+	int anchor = 0, length = strlen(line);
+	char *token;
+	int toknum = 0;
+	int *int_holder = NULL;
+
+	*mntent = NULL;
+
+	if (lxc_is_line_empty(line))
+		return 0;
+
+	entry = malloc(sizeof(struct mntent));
+
+	if (!entry) {
+		SYSERROR("failed to allocate memory");
+		goto out;
+	}
+
+	memset(entry, 0, sizeof(struct mntent));
+
+	while ((token = lxc_next_token(line, &anchor, length))) {
+		if ( *token == '#' ) 
+			break;
+
+		toknum++;
+
+		switch (toknum) {
+		case 1: entry->mnt_fsname = token; break;
+		case 2: entry->mnt_dir = token; break;
+		case 3: entry->mnt_type = token; break;
+		case 4: entry->mnt_opts = token; break;
+		case 5:
+			int_holder = &entry->mnt_freq;
+		case 6:
+			if (!int_holder)
+				int_holder = &entry->mnt_passno;
+
+			if (sscanf(token, "%u", int_holder) < 0) {
+				ERROR("invalid integer '%s'", token);
+				goto fail;
+			}
+
+			int_holder = NULL;
+		break;
+		}
+	}
+
+	if (toknum == 0) {
+		ret = 0;
+		goto fail;
+	} else if (toknum < 6) {
+		ERROR("too less columns into '%s': %u", line, toknum - 1);
+		goto fail;
+	} else if (toknum > 6) {
+		ERROR("garbage at the end of string '%s'", line);
+		goto fail;
+	}
+
+	ret = 0;
+	*mntent = entry;
+
+	goto out;
+fail:
+	mntent_free(entry);
+out:
+	return ret;
+}
+
+int lxc_mount_line(char *line)
+{
+	struct mntent *mntent;
+	int ret = -1;
+
+	if (parse_mount_line(line, &mntent)) {
+		ERROR("parsing of line '%s' failed", line);
+		return ret;
+	}
+
+	if (!mntent)
+		return 0;
+
+	if (mount_entry(mntent)) {
+		ERROR("'%s' entry mount failed", line);
+		goto out;
+	}
+
+	ret = 0;
+
+out:
+	mntent_free(mntent);
+
+	return ret;
+}
+
+static int parse_fstab_line(void *buffer, void *data)
+{
+	struct parsing_state *state = data;
+	char *line;
+
+	if (lxc_resolve_variables(buffer, &line, state->lxc_conf)) {
+		ERROR("%s: %u: variable resolving failed",
+						state->file, state->line);
+
+		return -1;
+	}
+
+	state->line++;
+
+	return lxc_mount_line(line);
+}
+
+int lxc_mount_fstab(const char *fstab, struct lxc_conf *lxc_conf)
+{
+	char buffer[MAXPATHLEN];
+
+	struct parsing_state state = {
+		.file = fstab,
+		.line = 1,
+		.lxc_conf = lxc_conf
+	};
+
+	return lxc_file_for_each_line(fstab, parse_fstab_line, buffer,
+							sizeof(buffer), &state);
+
+}
diff --git a/src/lxc/mount.h b/src/lxc/mount.h
new file mode 100644
index 0000000..9465f52
--- /dev/null
+++ b/src/lxc/mount.h
@@ -0,0 +1,32 @@
+/*
+ * lxc: linux Container library
+ *
+ * (C) Copyright IBM Corp. 2007, 2008
+ *
+ * Authors:
+ * Daniel Lezcano <dlezcano at fr.ibm.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+#ifndef __mount_h
+#define __mount_h
+
+struct lxc_conf;
+
+extern int lxc_mount_fstab(const char *file, struct lxc_conf *conf);
+extern int lxc_mount_line(char *line);
+
+#endif
diff --git a/src/lxc/parse.c b/src/lxc/parse.c
index b3d1194..4721d01 100644
--- a/src/lxc/parse.c
+++ b/src/lxc/parse.c
@@ -113,6 +113,52 @@ int lxc_char_right_gc(char *buffer, size_t len)
 	return 0;
 }
 
+int lxc_char_next_space(char *buffer, size_t len)
+{
+	int i;
+
+	for (i = 0; i < len; i++) {
+		if (buffer[i] == ' ' ||
+			buffer[i] == '\t' ||
+			buffer[i] == '\n' ||
+			buffer[i] == '\0')
+				return i;
+	}
+
+	return len;
+}
+
+char *lxc_next_token(char *buffer, int *anchor, size_t len)
+{
+	char *search_at, *token;
+	int token_length = 0;
+
+	if (*anchor >= len)
+		return NULL;
+
+	*anchor += lxc_char_left_gc(buffer + *anchor, len - *anchor);
+	search_at = buffer + *anchor;
+
+	token_length = lxc_char_next_space(search_at, len - *anchor);
+
+	if (!token_length)
+		return NULL;
+
+	*anchor += token_length;
+
+	token = malloc(token_length + 1);
+
+	if (!token) {
+		SYSERROR("failed to allocate memory");
+		return NULL;
+	}
+
+	strncpy(token, search_at, token_length);
+	*(token + token_length) = '\0';
+
+	return token;
+}
+
 int lxc_is_line_empty(char *line)
 {
 	int i;
diff --git a/src/lxc/parse.h b/src/lxc/parse.h
index a1cccea..5f502c2 100644
--- a/src/lxc/parse.h
+++ b/src/lxc/parse.h
@@ -38,6 +38,10 @@ extern int lxc_char_left_gc(char *buffer, size_t len);
 
 extern int lxc_char_right_gc(char *buffer, size_t len);
 
+extern int lxc_char_next_space(char *buffer, size_t len);
+
+extern char *lxc_next_token(char *buffer, int *anchor, size_t len);
+
 extern int lxc_is_line_empty(char *line);
 
 #endif
diff --git a/src/lxc/variables.c b/src/lxc/variables.c
new file mode 100644
index 0000000..5a53d9c
--- /dev/null
+++ b/src/lxc/variables.c
@@ -0,0 +1,218 @@
+/*
+ * lxc: linux Container library
+ *
+ * (C) Copyright IBM Corp. 2007, 2008
+ *
+ * Authors:
+ * Daniel Lezcano <dlezcano at fr.ibm.com>
+ * File by:
+ * Andrian Nord <nightnord@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+#define _GNU_SOURCE
+#include <string.h>
+#include <stdlib.h>
+#include <errno.h>
+
+#include <lxc/log.h>
+#include <lxc/conf.h>
+
+#include "parse.h"
+#include "config.h"
+
+lxc_log_define(lxc_variables, lxc);
+
+static char *resolve_var_lxcpath(const char *, struct lxc_conf *);
+static char *resolve_lxc_name(const char *, struct lxc_conf *);
+static char *resolve_lxc_rootfs(const char *, struct lxc_conf *);
+
+typedef char *(*resolve_cb)(const char *, struct lxc_conf *);
+
+struct map {
+	char *key;
+	resolve_cb cb;
+};
+
+static struct map map[] = {
+	{ "var.lxcpath",	resolve_var_lxcpath	},
+	{ "lxc.name",		resolve_lxc_name	},
+	{ "lxc.rootfs",		resolve_lxc_rootfs	},
+};
+
+static const size_t map_size = sizeof(map)/sizeof(struct map);
+
+static const struct map *getmap(const char* key)
+{
+	int i;
+
+	for (i = 0; i < map_size; i++) {
+		if (strncmp(map[i].key, key, strlen(key)) == 0)
+			return &map[i];
+	}
+
+	return NULL;
+}
+
+static char *resolve_var_lxcpath(const char *key, struct lxc_conf *lxc_conf)
+{
+	char *lxcpath = LXCPATH;
+
+	return lxcpath;
+}
+
+static char *resolve_lxc_name(const char *key, struct lxc_conf *lxc_conf)
+{
+	return lxc_conf->name;
+}
+
+static char *resolve_lxc_rootfs(const char *key, struct lxc_conf *lxc_conf)
+{
+	return lxc_conf->rootfs;
+}
+
+static int lxc_resolve_variable(const char *key, char** value,
+							struct lxc_conf *conf)
+{
+	const struct map *map;
+
+	*value = NULL;
+
+	map = getmap(key);
+
+	if (!map)
+		return -1;
+
+	*value = map->cb(key, conf);
+
+	if (!value)
+		return -1;
+
+	return 0;
+}
+
+int lxc_resolve_variables(const char *string, char **result,
+						struct lxc_conf *lxc_conf)
+{
+	char *buffer;
+	char *var, *tmp, *skipped;
+	char *key, *key_end, *space;
+	char *value;
+
+	int ret = -1;
+
+	buffer = strdup(string);
+
+	if (!buffer) {
+		SYSERROR("failed to allocate memory");
+		goto out;
+	}
+
+	skipped = var = buffer;
+	*result = malloc(sizeof(char));
+
+	if (!*result) {
+		SYSERROR("failed to allocate memory for single character 0o");
+		goto fail;
+	}
+
+	**result = '\0';
+
+	while ((var = strstr(var, "$"))) {
+		if (var != buffer && *(var-1) == '\\') {
+			var++;
+
+			continue;
+		}
+
+		*var = '\0';
+		key = var + 1;
+		key_end = NULL;
+
+		if (*key == '{') {
+			key_end = strchr(key + 1, '}');
+
+			if (!key_end) {
+				ERROR("no closing '}' in '%s'", key);
+				goto fail;
+			}
+
+			*key = '\0';
+			*key_end = '\0';
+			key++;
+
+			space = "";
+		} else {
+			key_end = key + lxc_char_next_space(key, strlen(key));
+
+			if ( *key_end == ' ' )
+				space = " ";
+			else if ( *key_end == '\t' )
+				space = "\t";
+			else
+				space = "";
+
+			*key_end = '\0';
+		}
+
+		if (lxc_resolve_variable(key, &value, lxc_conf)) {
+			ERROR("variable '%s' not found", key);
+			goto fail;
+		}
+
+		if (!key_end) {
+			skipped = value;
+			break;
+		}
+
+		var = key_end + 1;
+
+		if (!asprintf(&tmp, "%s%s%s%s", *result,
+						skipped, value, space)) {
+			SYSERROR("failed to allocate memory");
+			goto fail;
+		}
+
+		free(*result);
+		*result = tmp;
+
+		skipped = var;
+	}
+
+	if (skipped != buffer) {
+		if (!asprintf(&tmp, "%s%s", *result, skipped)) {
+			SYSERROR("failed to allocate memory");
+			goto fail;
+		}
+
+		*result = tmp;
+	} else {
+		free(*result);
+
+		*result = buffer;
+		
+		return 0;
+	}
+
+	ret = 0;
+
+	goto out;
+
+fail:
+	free(*result);
+out:
+	free(buffer);
+	return ret;
+}
diff --git a/src/lxc/variables.h b/src/lxc/variables.h
new file mode 100644
index 0000000..0e8c450
--- /dev/null
+++ b/src/lxc/variables.h
@@ -0,0 +1,34 @@
+/*
+ * lxc: linux Container library
+ *
+ * (C) Copyright IBM Corp. 2007, 2008
+ *
+ * Authors:
+ * Daniel Lezcano <dlezcano at fr.ibm.com>
+ * File by:
+ * Andrian Nord <NightNord@gmail.com>
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation; either
+ * version 2.1 of the License, or (at your option) any later version.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ */
+
+#ifndef __variables_h
+#define __variables_h
+
+struct lxc_conf;
+
+extern int lxc_resolve_variables(const char* string, char** result,
+						struct lxc_conf *lxc_conf);
+
+#endif
